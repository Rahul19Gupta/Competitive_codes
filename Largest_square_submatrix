
def Largest_square_submatrix_with_all_ones(input_matrix):
    #TIME COMPLEXITY: O(N^2)
    #SPACE COMPLEXITY : O(1)
    #DECLARE THE VARIBLES
    Max_size=-1

    for i in range(1,len(input_matrix)):

        for j in range(1,len(input_matrix)):

            if(input_matrix[i][j]==1):

                input_matrix[i][j]=min(input_matrix[i][j-1],input_matrix[i-1][j],input_matrix[i-1][j-1])+1

                if(input_matrix[i][j]>Max_size):
                    Max_size=input_matrix[i][j]


    #PRINT THE ENTIRE INPUT MATRIX
    for i in range(0,len(input_matrix)):
        for j in range(0,len(input_matrix[0])):
            print(input_matrix[i][j],end=" ")
        print()


    return(Max_size)



input_matrix=[[1,1,1,1],
              [0,0,1,1],
              [1,1,1,1],
              [0,1,1,1]]
print(Largest_square_submatrix_with_all_ones(input_matrix))
    
