from collections import defaultdict


        
        
class Graph:
    def __init__(self):
        self.graph=defaultdict(list)

    def addEdge(self,u,v,weight,bidirectional=True):

        self.graph[u].append((v,weight))
        if(bidirectional):
            self.graph[v].append((u,weight))

    def Print(self):
        print(self.graph)


    def BellmanFord_Algorithm(self,source,vertices):
        #TIME COMPLEXITY: O(V*E)
        #SPACE COMPLEXITY: O(1)
        #import pdb;pdb.set_trace()
        infinity=1000000
        Shortest_distance=[infinity for i in range(0,vertices)]

        Shortest_distance[source]=0

        #NOW RELAX EACH EDGE V-1 TIMES

        for count in range(1,vertices):
            for node in range(0,vertices):

                for neighbour in self.graph[node]:
                    cost=neighbour[1]
                    #RELAXING AN EDGE
                    if(Shortest_distance[neighbour[0]]>Shortest_distance[node] + cost):

                        Shortest_distance[neighbour[0]]=Shortest_distance[node] + cost

        print(Shortest_distance)

        #NOW IF ONE MORE TIME IF WE ARE ABLE TO RELAX THE EDGE IT MEANS THAT THERE IS A NEGATIVE EDGE CYCLE IN A GRAPH
        for node in range(0,vertices):

                for neighbour in self.graph[node]:
                    cost=neighbour[1]
                    if(Shortest_distance[neighbour[0]]>Shortest_distance[node] + cost):

                        print("There is a negative weight cycle in a graph")
                        return
        

            
g = Graph() 
g.addEdge(0, 1, -1,False) 
g.addEdge(2, 0, -4,False) 
g.addEdge(1, 2, 3,False) 
g.addEdge(1, 3, 2,False) 
g.addEdge(1, 4, 2,False) 
g.addEdge(3, 2, 5,False) 
g.addEdge(3, 1, 1,False) 
g.addEdge(4, 3, -3,False)
source=0
vertices=5
g.BellmanFord_Algorithm(source,vertices)
                    

        

        
    
