
def Min_COst_Climbing_Stairs(Cost):

    n=len(Cost)
    #BOTTOM UP DYNMAIC PROGRAMMING
    Min_Cost=[0 for i in range(0,len(Cost))]

    #BASE CASE

    if(n==0):
        return(0)
    elif(n==1):
        return(Cost[0])

    elif(n==2):
        return(Cost[0]+Cost[1])

    
    Min_Cost[0]=Cost[0]
    Min_Cost[1]=Cost[1]

    #PROCESSING// RECURSIVE CASE
    for i in range(2,n):

        Min_Cost[i]=min(Min_Cost[i-1]+Cost[i],Min_Cost[i-2]+Cost[i])

    #PRINT THE ENTIRE DP TABLE
    print(Min_Cost)

    return(min(Min_Cost[n-1],Min_Cost[n-2]))
           

Cost=[1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
print(Min_COst_Climbing_Stairs(Cost))
