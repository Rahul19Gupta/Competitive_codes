from collections import defaultdict

def is_chain_possible(s1,s2):

    len1=len(s1)
    len2=len(s2)

    if(len1==len2):
        return(0)
    
    Hash_map_s1=defaultdict()

    Hash_map_s2=defaultdict()

    for i in range(0,len(s1)):

        Hash_map_s1[s1[i]]=0

    for j in range(0,len(s2)):

        Hash_map_s2[s2[j]]=0


    for i in range(0,len(s1)):

        Hash_map_s1[s1[i]]+=1

    for j in range(0,len(s2)):

        Hash_map_s2[s2[j]]+=1

    count=0

    if(len1<len2):

        for i in range(0,len2):

            try:

                if(Hash_map_s2[s2[i]]==Hash_map_s1[s2[i]]):

                    count+=1

            except:

                pass

        if(count==len1):

            return(1)

    elif(len2<len1):

        for i in range(0,len1):

            try:

                if(Hash_map_s1[s1[i]]==Hash_map_s2[s1[i]]):

                    count+=1

            except:

                pass

        if(count==len2):

            return(1)

    return(0)

        

def Longest_string_chain(String):

    n=len(String)
    
    #BOTTOM UP DYNAMIC PROGRAMMNG APPROACH
    Longest_String=[0 for i in range(0,n)]

    #BASE CASE:
    for i in range(0,n):

        if(len(String[i])!=1):
            break

        Longest_String[i]=1


    #RECURSIVE CASE:

    while(i<n):

        if(is_chain_possible(String[i],String[i-1])):

            Longest_String[i]=Longest_String[i-1]+1

        else:

            Longest_String[i]=Longest_String[i-1]

        i+=1

    #PRINT THE ENTIRE DP TABLE

    for i in range(0,n):

        print(Longest_String[i],end=" ")

        

s=["a","b","ba","bca","bda","bdca"]
Longest_string_chain(s)
            
            

    
