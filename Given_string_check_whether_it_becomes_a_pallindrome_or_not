def Longest_common_subsequence(s1,s2,m,n):
    #BOTTOM UP DYNAMIC PROGRAMMIMG APPROACH
    #TIME COMPLEXITY: O(M*N)
    #SPACE COMPLEXITY: O(M+N)
    #INITIALIZE THE DP TABLE
    LCS=[[0 for j in range(0,n+1)]for i in range(0,m+1)]

    #BASE CASE:
    #CASE1:
    #IF STRING1 IS EMPTY AND STRING2 IS NOT EMPTY
    for j in range(0,n+1):
        LCS[0][j]=0

    #CASE2:
    #IF STRING2 IS EMPTY AND STRING1 IS NOT EMPTY
    for i in range(0,m+1):
        LCS[i][0]=0

    #RECURSIVE CASE
    for i in range(1,m+1):

        for j in range(1,n+1):

            #IF LAST CHRACHTER OF STRING1 MATCHES WITH THE LAST CHARCHTER OF STRING2
            if(s1[i-1]==s2[j-1]):

                LCS[i][j]=1+LCS[i-1][j-1]

            else:

                LCS[i][j]=max(LCS[i][j-1],LCS[i-1][j])

    #PRINT THE ENTIRE DP TABLE
    for i in range(0,m+1):

        for j in range(0,n+1):

            print(LCS[i][j],end=" ")

        print()

    return(LCS[m][n])


def Given_string_check_whether_it_becomes_a_pallindrome_or_not(s,k):
    
    s1=s
    s2=s1[::-1]
    m=len(s1)
    n=len(s2)
    l=Longest_common_subsequence(s1,s2,m,n)
    if(m-l<=k):
        print("Yes,it becomes a pallindrome after doing atmost {0} deletions".format(k))

    else:
        print("No ,it will not become a pallindrome")



s="abdxa"
k=2
Given_string_check_whether_it_becomes_a_pallindrome_or_not(s,k)
    

    

    
