def trap(height):
        #import pdb;pdb.set_trace()
        n=len(height)
        if(n== (0 or 1)):
            return(0)
        left_max=[]
        Right_max=[]
        #BOTTOM UP DYNAMIC PROGRAMMING APPROACH
        left_max.append(height[0])
        Max_left=left_max[0]
        
        for i in range(1,n):
            
            if(height[i]>Max_left):
                Max_left=height[i]
            left_max.append(Max_left)
        
        Right_max.append(height[n-1])
        Max_right=Right_max[0]
        for i in range(n-2,-1,-1):
            
            if(height[i]>Max_right):
                Max_right=height[i]
            Right_max.insert(0,Max_right)
        
        print(left_max)
        print(Right_max)
        total_volume=0
        for i in range(0,n):
            
            total_volume+=min(left_max[i],Right_max[i])-height[i]
            
        return(total_volume)

    
height=[0,1,0,2,1,0,1,3,2,1,2,1]
print(trap(height))
