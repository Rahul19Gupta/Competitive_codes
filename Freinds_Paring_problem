
def Friends_pairing_problem(n):
    #BOTTOM UP DYNAMIC PROGRAMMING APPROACH
    #TIME COMPLEXITY:O(N)
    #SPACE COMPLEXITY:O(N)

    
    #INITILAIZE THE DP TABLE
    No_of_ways=[0 for i in range(0,n+1)]

    #BASE CASE:
    No_of_ways[0]=0
    #IF THERE IS ONLY ONE FRIEND THERE IS ONLY ONE WAY----> HE CAN GO ALONE
    No_of_ways[1]=1
    #IF THERE ARE TWO FRIENDS THEN THERE IS TWO WAY--------> EITHER HE CAN GO SINGLE OR HE CAN GO WITH PAIR
    No_of_ways[2]=2

    #RECURSIVE CASE:

    for i in range(3,n+1):

        No_of_ways[i]=No_of_ways[i-1]+(i-1)*No_of_ways[i-2]


    #PRINT THE ENTIRE DP TABLE
    print(No_of_ways)

    return(No_of_ways[n])


n=100
x=Friends_pairing_problem(n)
print("The Total number of ways {0} friends can go to party is {1}".format(n,x))


