class Queue:
    def __init__(self):
        self.data=[]

    def enqueue(self,data):
        self.data.insert(0,data)

    def dequeue(self):
        if(len(self.data)!=0):
            return(self.data.pop())

    def isEmpty(self):
        return(len(self.data)==0)

    def Print(self):
        print(self.data)

    
def BFS_using_an_adjacency_matrix(matrix,source):
    #TIME COMPELXITY: O(V^2)
    #SPACE COMPLEXITY: O(V)
    #import pdb;pdb.set_trace()
    visited=[0 for i in range(0,len(matrix))]

    q=Queue()

    q.enqueue(source)

    visited[source]=1

    while(not q.isEmpty()):

        node=q.dequeue()

        print(node)

        for j in range(0,len(matrix[0])):

            if(visited[j]==0):

                visited[j]=1

                q.enqueue(j)


matrix=[[0,1,1,1,0],
        [1,0,1,0,0],
        [1,1,0,0,0],
        [1,0,0,1,0],
        [0,0,0,1,0]]


BFS_using_an_adjacency_matrix(matrix,0)
                
