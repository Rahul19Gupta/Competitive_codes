from collections import deque
from collections import defaultdict
class Graph:

    def __init__(self,vertices):
        self.graph=defaultdict(list)
        self.vertices=vertices

    def addEdge(self,u,v,bidirectional=True):

        self.graph[u].append(v)
        if(bidirectional):
            self.graph[v].append(u)
        

    def Bipartite_Graph_or_not(self,u):

        #TIME COMPLEXITY : O(V+E)
        #SPACE COMPLEXITY: O(V) -------> All NODES HAS TO BE PUSHED INTO QUEUE ONCE AND THEN POPPED OUT
        # -1 MEANS RED COLOR
        # 1 MEANS BLUE COLOR
        
        "LET'S FIRST INITALISED THE QUEUE"
        q=deque()

        "INITIALIZED THE VISITED ARRAY"
        visited=[0 for i in range(0,self.vertices)]
        
        q.append(u)

        "MARK THAT PARTICULAR NODE AS VISITED"
        visited[u]=1

        "UNTILL QUEUE IS NOT EMPTY"
        while(len(q)):

            node=q.popleft()

            print(node)
            
            for neighbour in self.graph[node]:

                if(not visited[neighbour]):

                    q.append(neighbour)

                    "IF PARENT IS MARKED AS RED IN COLOR THEN CHILDREN U MARK IT AS BLUE IN COLOR"
                    if(visited[node]==-1):
                        visited[neighbour]=1

                    
                    else: 
                        visited[neighbour]=-1

                else:

                    if(visited[neighbour]==visited[node]):

                        print("Graph is not a bipartite graph")
                        return(0)

        print("Graph is Bipartite Graph")
        return(1)



g=Graph(8)
g.addEdge(0,1)
g.addEdge(0,2)
g.addEdge(1,2)
g.addEdge(1,3)
g.addEdge(1,4)
g.addEdge(2,5)
g.addEdge(2,6)
g.addEdge(3,7)
g.addEdge(4,7)
g.addEdge(5,7)
g.addEdge(6,7)




print(g.Bipartite_Graph_or_not(0))
            
                    

            

    

    

    
    

    
