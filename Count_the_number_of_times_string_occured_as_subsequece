

def Count_the_number_of_times_the_string_occured_as_subsequence(s1,s2,m,n):
    #BOTTOM UP DYNAMIC PROGRAMMING APPROACH
    #TIME COMPLEXITY: O(M*N)
    #SPACE COMPLEXITY: O(M*N)
    #INITILALIZE THE DP ARRAY
    Count=[[0 for j in range(0,n+1)]for i in range(0,m+1)]

    #BASE CASE:
    #CASE1:
    #IF STRING1 IS EMPTY AND STRING2 IS NOT THEN THE COMMON SUBSEQUENCE CAN NEVER BE PRESENT
    for j in range(0,n+1):
        Count[0][j]=0

    #CASE2:
    #IF STRING2 IS EMPTY AND STRING1 IS NOT(BCZ NULL IS SUBSEQUENCE OF EVERY STRING)
    for i in range(0,m+1):
        Count[i][0]=1

    #RECURSIVE CASE
    for i in range(1,m+1):

        for j in range(1,n+1):

            #IF THE CHRACHTER MATCHES
            if(s1[i-1]==s2[j-1]):
                Count[i][j]=Count[i-1][j-1]+Count[i-1][j]
                
            #IF NO MATCH
            else:

                Count[i][j]=Count[i-1][j]

    #PRINT THE ENTIRE DP TABLE
    for i in range(0,m+1):

        for j in range(0,n+1):

            print(Count[i][j],end=" ")

        print()

    return(Count[m][n])

s1="abbab"
s2="ab"
m=len(s1)
n=len(s2)
print(Count_the_number_of_times_the_string_occured_as_subsequence(s1,s2,m,n))


    
    
