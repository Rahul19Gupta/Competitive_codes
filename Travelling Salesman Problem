

def Travelling_salesman_problem(Distance,pos,mask,n):
    #import pdb;pdb.set_trace()
    print(mask)
    #TOP DOWN DYNAMIC PROGRAMMING APPROACH
    #TIME COMPLEXITY:O(2^N)(N)
    #SPACE COMPLEXITY:O(2^N)(N)
    global DP
    global visited
    #BASE CASE:
    #IF ALL CITES ARE VISITED THAN RETURN TO THE ORIGNAL CITY BACK
    if(mask==visited):
        return(Distance[pos][0])

    if(DP[mask][pos]):
        return(DP[mask][pos])

    #RECURSIVE CASE
    ans=1000000
    for city in range(0,n):
        
        #IT MEANS THAT PARTICULAR CITY IS NOT YET VISITED
        if((mask & (1<<city))==0):
            new_ans=Distance[pos][city] + Travelling_salesman_problem(Distance,city, mask | (1<<city) ,n)
            ans=min(ans,new_ans)
            #DP[mask][pos]=ans
    DP[mask][pos]=ans
    return(ans)
        

#INITIALIZE THE DP TABLE
n=4
visited=(1<<n)-1
DP=[[0 for j in range(0,n)]for i in range(0,(1<<n))]
Distance=[[0,20,42,25],
          [20,0,30,34],
          [42,30,0,10],
          [25,34,10,0]]

mask=1
pos=0
n=4
x=Travelling_salesman_problem(Distance,pos,mask,n)
#PRINT THE ENTIRE DP TABLE

for i in range(0,(1<<n)):

    for j in range(0,n):

        print(DP[i][j],end=" ")

    print()

print("MINIMUM HAMILTONIAN WEIGHT CYCLE TO COVER THE ENTIRE TRIP {0}".format(x))




    

    

    
