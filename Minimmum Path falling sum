def minFallingPathSum(A):
        
        n=len(A)
        #BOTTOM UP DYNAMIC PROGRAMMING APPROACH
        DP=[[0 for j in range(0,n)]for i in range(0,n)]
        
        #BASE CASE:
        for j in range(0,len(A[0])):
            
            DP[0][j]=A[0][j]
            
        #RECURSIVE CASE:
        
        for i in range(1,n):
            
            for j in range(0,n):
            
                if(j==0):

                    DP[i][j]=min(DP[i-1][j],DP[i-1][j+1])+A[i][j]
                    
                elif(j==n-1):
                    
                    DP[i][j]=min(DP[i-1][j-1],DP[i-1][j])+A[i][j]
                    
                else:
                    
                    DP[i][j]=min(DP[i-1][j],DP[i-1][j+1],DP[i-1][j-1])+A[i][j]


        #PRINT THE ENTIRE DP TABLE
        for i in range(0,n):

            for j in range(0,n):

                print(DP[i][j],end=" ")

            print()

        return(min(DP[n-1]))

A=[[1,2,3],
   [4,5,6],
   [7,8,9]]

minFallingPathSum(A)
        
