import math
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None


def Extract_Min(arr):

    global k
    
    heapsize=k
    
    if(heapsize<1):

        print("HeapUnderflow")
        return

    Min=arr[0]
    
    return(Min)
        
def Print_the_linked_list(temp):

    while(temp):
        print(temp.data,end="--------->")
        temp=temp.next

    print()
    
    
def Min_Heapify(arr,i):
    global k
    #import pdb;pdb.set_trace()
    heapsize=k
    #STEP1: DECLARE TWO POINTERS LEFT AND RIGHT
    left= 2 * i + 1
    right=2 * i + 2

    #FIRST DO THE BOUNDARY CHECK AND THEN COMPARE arr[i] and arr[left]

    if(left<heapsize and arr[left].data<arr[i].data):

        minimum=left

    else:

        minimum=i

    if(right<heapsize and arr[minimum].data>arr[right].data):

        minimum=right


    if(minimum!=i):

        arr[minimum],arr[i]=arr[i],arr[minimum]
        
        Min_Heapify(arr,minimum)
   

def Build_Min_Heap(arr):
    
    global k
    print([arr[0].data,arr[1].data,arr[2].data,arr[3].data])
    heapsize=k

    x=math.floor(heapsize//2)-1

    for i in range(x,-1,-1):

        Min_Heapify(arr,i)

    print([arr[0].data,arr[1].data,arr[2].data,arr[3].data])

    
    
def Merge_k_sorted_linked_lists(heap_arr,k,N):
    #TIME COMPLEXITY: O(Nklogk)
    #SPACE COMPLEXITY: O(k)
    infinity=1000000
    #import pdb;pdb.set_trace()
    final_sorted_list=[]
    
    result_size=N*k

    count=0
    print([heap_arr[0].data,heap_arr[1].data,heap_arr[2].data,heap_arr[3].data])
    Build_Min_Heap(heap_arr)

    while(count != result_size):

        root=Extract_Min(heap_arr)

        final_sorted_list.append(root.data)

        if(root.next):
            
            heap_arr[0]=root.next

        else:
            node=Node(infinity)
            heap_arr[0]=node

        Min_Heapify(heap_arr,0)

        count+=1


    print("The Final Merged linked list is : {}".format(final_sorted_list))
    
     
    

#FIRST SORTED LINKED LIST
node1=Node(13)
node2=Node(23)
node3=Node(25)

node1.next=node2
node2.next=node3

#SECOND SORTED LINKED LIST
node4=Node(2)
node5=Node(4)
node6=Node(10)

node4.next=node5
node5.next=node6

#THIRD SORTED LINKED LIST
node7=Node(11)
node8=Node(15)
node9=Node(20)

node7.next=node8
node8.next=node9

#FOURTH SORTED LINKED LIST

node10=Node(100)
node11=Node(200)
node12=Node(300)

node10.next=node11
node11.next=node12

arr=[node1,node4,node7,node10]

k=4
N=3
Merge_k_sorted_linked_lists(arr,k,N)


    
