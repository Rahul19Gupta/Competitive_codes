class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        
def lowestCommonAncestor_Helper(root,p,q):
        import pdb;pdb.set_trace()
        """Modified Version of Post order Traversal"""
        if(not root):
            return(0)
        
        """Leaf Node"""
        if(not root.left and not root.right and (root.data!= (p and q))):
            return(0)
        elif(not root.left and not root.right and (root.data==(p or q))):
            return(1)
        
        
        """Recursive logic"""
        x=lowestCommonAncestor_Helper(root.left,p,q)
        print(x)
        y=lowestCommonAncestor_Helper(root.right,p,q)
        print(y)
        "Processing of the output"

        if(root.data== p or q):
            return(root.data)
      
node1=Node(3)
node2=Node(5)
node3=Node(1)
node4=Node(6)
node5=Node(2)
node6=Node(0)
node7=Node(8)
node8=Node(7)
node9=Node(4)

node1.left=node2
node1.right=node3
node2.left=node4
node2.right=node5
node3.left=node6
node3.right=node7
node5.left=node8
node5.right=node9

p=5
q=1
x=lowestCommonAncestor_Helper(node1,p,q)
print("The Lowest Common Ancestor of a given Binary Tree is {}".format(x))
