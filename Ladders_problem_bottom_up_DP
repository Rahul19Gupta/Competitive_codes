#BOTTOM UP DYNAMIC PROGRAMMING APPROCH
#TIME COMPLEXITY: O(N*K)
#SPACE COMPLEXITY: O(N)

def Ladders_Problem(n,k):
    
    
    #INITIALIZE THE DP ARRAY FIRST
    No_of_ways=[0 for i in range(0,n+1)]
    
    #BASE CASE:
    No_of_ways[0]=1
    No_of_ways[1]=1
    #RECURSIVE CASE
    for i in range(2,n+1):
        ans=0
        for j in range(1,k+1):

            if(i>=j):
                ans+=No_of_ways[i-j]
            
        No_of_ways[i]=ans

    #PRINT ENTIRE DP TABLE
    print(No_of_ways)
   


n=4
k=3
Ladders_Problem(n,k)




    
    
