

def Diwali_puzzle_light_bulb_patakha(i,prev,count):
    global mod,k,DP,n
    #TOP DOWN DYNAMIC PROGRAMMING APPROACH
    #TIME COMPLEXITY:
    #SPACE COMPLEXITY:
    #BASE CASE:
    #CASE1:
    #WHILE EXAMINING THE ENTIRE LIGHT BULB ARRAY WE REACH THE END OF THE ARRAY
    if(i==n):
        if(count==k):
            return(1)
        else:
            return(0)

    if(DP[i][prev][count]):
        return(DP[i][prev][count])

    ans=0
    #RECURSIVE CASE:
    if(prev==1):
        ans+=Diwali_puzzle_light_bulb_patakha(i+1,1,count+1)

    else:
        ans+=Diwali_puzzle_light_bulb_patakha(i+1,1,count)

    ans+=Diwali_puzzle_light_bulb_patakha(i+1,0,count)

    ans=ans%mod

    DP[i][prev][count]=ans

    return(ans)
    

#INITIALIZE THE DP ARRAY
DP=[[[0 for k in range(0,100)]for j in range(0,3)]for i in range(0,100)]
k=87
mod= 10**6 +3
i=0
n=99
count=0
x=Diwali_puzzle_light_bulb_patakha(1,0,0)
y=Diwali_puzzle_light_bulb_patakha(1,1,0)
print(x+y)
