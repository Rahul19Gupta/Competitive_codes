class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

        
#SLOW POINTER AND FAST POINTER METHOD
def Middle_node_of_a_linked_list(head):
    #TIME COMPLEXITY: O(N)
    #SPACE COMPLEXITY: O(N)
    #PRINT THE LINKED LIST BEFORE REVERSAL
    temp=head
    while(temp):
        print(temp.data,end="---------->")
        temp=temp.next
    print()
    slow=head
    fast=head

    while(slow and fast):

        fast=fast.next
        if(fast):
            fast=fast.next
        else:
            break
        slow=slow.next
        

    print("Middle node of the linked list is {}".format(slow.data))
        
    
node1=Node(10)
node2=Node(20)
node3=Node(30)
node4=Node(40)
node5=Node(50)
node6=Node(60)


node1.next=node2
node2.next=node3
node3.next=node4
node4.next=node5
node5.next=node6



Middle_node_of_a_linked_list(node1)
