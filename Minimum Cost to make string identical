def minimumDeleteSum(s1, s2):
        m=len(s1)
        n=len(s2)
        
        #BOTTOM UP DYNNAMIC PROGRAMMING APPROACH
        Min_Cost=[[0 for j in range(n+1)]for i in range(m+1)]
        
        #BASE CASE:
        for i in range(1,m+1):
            
            Min_Cost[i][0]=ord(s1[i-1])
            
        for j in range(0,n+1):
            
            Min_Cost[i][0]=ord(s2[i-1])
            
        #RECURSIVE CASE:

        for i in range(1,m+1):

            for j in range(1,n+1):
        
                if(s1[i-1]==s2[j-1]):
                            
                    Min_Cost[i][j]=Min_Cost[i-1][j-1]
                            
                else:
                        
                    x=Min_Cost[i-1][j]+ord(s1[i-1])

                    y=Min_Cost[i][j-1]+ord(s2[j-1])

                    Min_Cost[i][j]=min(x,y)


        #PRINT THE ENTIRE DP TABLE

        for i in range(0,m+1):

            for j in range(0,n+1):

                print(Min_Cost[i][j],end=" ")

            print()
                
        return(Min_Cost[m-1][n-1])

s1="sea"
s2="eat"
minimumDeleteSum(s1, s2)   
                
