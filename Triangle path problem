
def Triangle_path_problem(triangle):

    n=len(triangle)

    if(n==1):
        return(triangle[0][0])
    
    #BOTTOM UP DYNAMIC PROGRAMMING APPROACH:
    DP=[[0 for j in range(0,n)]for i in range(0,n)]

    #BASE CASE:
    Sum=0
    for i in range(0,n):

        Sum=Sum+triangle[i][0]

        DP[i][0]=Sum

    #RECURSIVE CASE:
    for i in range(1,n):

        for j in range(1,i+1):
            x=100000
            if(DP[i-1][j]):

                x=triangle[i][j]+DP[i-1][j]

            y=DP[i-1][j-1]+triangle[i][j]

            DP[i][j]=min(x,y)

    #PRINT THE ENTIRE DP TABLE
    for i in range(0,n):

        for j in range(0,i+1):

            print(DP[i][j],end=" ")

        print()

    return(min(DP[n-1]))

triangle=[[7],[-5,9],[6,5,2],[-8,-2,-7,3],[-2,6,-6,-1,4]]
print(Triangle_path_problem(triangle))
            

    
