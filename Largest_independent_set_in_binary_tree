class Node:
    def __init__(self,data):
        self.data=data
        self.lis=0
        self.left=None
        self.right=None
        
def Largest_independent_set_in_a_binary_tree(root):

    #TOP DOWN DYNAMIC PROGRAMMING APPROACH
    #TIME COMPLEXITY: O(N)
    #SPACE COMPLEXITY: O(N)
    #BASE CASE:
    if(not root):
        return(0)

    #LEAF NODE
    if(not root.left and not root.right):
        root.lis=root.data
        return(root.data)

    #IF THE VALUE OF THAT NODE IS ALREADY COMPUTED
    if(root.lis):
        return(root.lis)

    #RECURSIVE CASE

    #VALUE INCLUDING ROOT
    root_value_including=root.data

    if(root.left):

        root_value_including+=Largest_independent_set_in_a_binary_tree(root.left.left) + Largest_independent_set_in_a_binary_tree(root.left.right)

    if(root.right):

        root_value_including+=Largest_independent_set_in_a_binary_tree(root.right.left) + Largest_independent_set_in_a_binary_tree(root.right.right)

    #VALUE EXCLUDING ROOT

    root_value_excluding=Largest_independent_set_in_a_binary_tree(root.left) + Largest_independent_set_in_a_binary_tree(root.right)

    #STORE THE VALUE

    root.lis=max(root_value_including,root_value_excluding)

    return(root.lis)

    


node1=Node(5)
node2=Node(10)
node3=Node(6)
node4=Node(4)
node5=Node(3)
node6=Node(15)
node7=Node(1)

node1.left=node2
node1.right=node3
node2.left=node4
node2.right=node5
node3.left=node6
node3.right=node7

print(Largest_independent_set_in_a_binary_tree(node1))
